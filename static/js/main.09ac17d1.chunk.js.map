{"version":3,"sources":["Button.js","Memory.js","index.js"],"names":["Button","props","buttons","map","button","className","disabled","key","id","onClick","clicked","name","Memory","state","step","count","compareNumbers","Math","random","handleClick","e","forEach","parseInt","target","setState","filter","length","handleRestartButton","sort","this","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09ac17d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    const buttons = props.buttons;\r\n    return (\r\n        buttons.map(button => <button\r\n            className={button.disabled === true ? \"memory__btn memory__btn--disabled\" : \"memory__btn\"}\r\n            key={button.id}\r\n            id={button.id}\r\n            onClick={props.onClick}\r\n            disabled={button.disabled}\r\n        >\r\n            {button.clicked ? button.name : null}\r\n        </button>)\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './css/App.css';\r\nimport Button from './Button';\r\n\r\nclass Memory extends Component {\r\n    state = {\r\n        buttons: [\r\n            { id: 0, name: 'A', clicked: false, disabled: false },\r\n            { id: 1, name: 'A', clicked: false, disabled: false },\r\n            { id: 2, name: 'B', clicked: false, disabled: false },\r\n            { id: 3, name: 'B', clicked: false, disabled: false },\r\n            { id: 4, name: 'C', clicked: false, disabled: false },\r\n            { id: 5, name: 'C', clicked: false, disabled: false },\r\n            { id: 6, name: 'D', clicked: false, disabled: false },\r\n            { id: 7, name: 'D', clicked: false, disabled: false },\r\n            { id: 8, name: 'E', clicked: false, disabled: false },\r\n            { id: 9, name: 'E', clicked: false, disabled: false },\r\n            { id: 10, name: 'F', clicked: false, disabled: false },\r\n            { id: 11, name: 'F', clicked: false, disabled: false },\r\n            { id: 12, name: 'G', clicked: false, disabled: false },\r\n            { id: 13, name: 'G', clicked: false, disabled: false },\r\n            { id: 14, name: 'H', clicked: false, disabled: false },\r\n            { id: 15, name: 'H', clicked: false, disabled: false },\r\n        ],\r\n        step: 0,\r\n        count: 0\r\n    }\r\n\r\n    compareNumbers = () => {\r\n        let a = Math.random() - 0.5;\r\n        let b = Math.random() - 0.5;\r\n        return a - b\r\n    }\r\n\r\n    // mixing the table with buttons\r\n    componentDidMount() {\r\n        let buttons = [...this.state.buttons];\r\n        buttons = buttons.sort(this.compareNumbers);\r\n        this.setState({\r\n            buttons\r\n        })\r\n    }\r\n\r\n    // checking if two buttons have been clicked and checking if there is a match\r\n    componentDidUpdate() {\r\n        let buttons = [...this.state.buttons];\r\n        buttons = buttons.filter(button => button.clicked === true ? button : null)\r\n\r\n        setTimeout(() => {\r\n            if (buttons.length === 2 && buttons[0].name !== buttons[1].name) {\r\n                let buttons = [...this.state.buttons];\r\n                buttons.forEach(button => { if (button.clicked === true) { button.clicked = false; } })\r\n                this.setState({\r\n                    buttons,\r\n                    count: this.state.count + 1,\r\n                    step: 0\r\n                })\r\n            } else if (buttons.length === 2 && buttons[0].name === buttons[1].name) {\r\n                if (buttons[0].id !== buttons[1].id) {\r\n                    let buttons = [...this.state.buttons];\r\n                    buttons.forEach(button => { if (button.clicked === true) { button.disabled = true; button.clicked = false } })\r\n                    this.setState({\r\n                        buttons,\r\n                        count: this.state.count + 1,\r\n                        step: 0\r\n                    })\r\n                }\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    // show button name on click [max 2 buttons at same time]\r\n    handleClick = e => {\r\n        let buttons = [...this.state.buttons];\r\n        if (this.state.step < 2) {\r\n            buttons.forEach(button => { if (parseInt(e.target.id, 10) === button.id) { button.clicked = true; } })\r\n\r\n            this.setState({\r\n                buttons\r\n            })\r\n            let clickedButtons = buttons.filter(button => button.clicked === true);\r\n\r\n            // prevent from clicked two times the same button\r\n            if (clickedButtons.length !== 1) {\r\n                this.setState({\r\n                    step: this.state.step + 1\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // restart game and start again\r\n    handleRestartButton = () => {\r\n        let buttons = [...this.state.buttons];\r\n        buttons.forEach(button => { if (button.disabled === true) { button.disabled = false; } })\r\n        buttons.forEach(button => { if (button.clicked === true) { button.clicked = false; } })\r\n        buttons = buttons.sort(this.compareNumbers);\r\n        this.setState({\r\n            buttons,\r\n            count: 0,\r\n            step: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"memory\">\r\n                <Button buttons={this.state.buttons} onClick={this.handleClick} />\r\n                <div className=\"memory__text\">Liczba pr√≥b: {this.state.count}</div>\r\n                <button onClick={this.handleRestartButton} className=\"memory__restart-btn\">Zagraj od nowa</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Memory;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Memory from './Memory';\n\nReactDOM.render(<Memory />, document.getElementById('root'));\n"],"sourceRoot":""}